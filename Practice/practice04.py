# 문제 설명
# 자리 배치
# 난이도: ★★★★★

# 배경
# 자리를 배정받기 직전의 김토스님은 자리 배치 자동화 시스템도 고장났다는 걸 알게 되었습니다. 빨리 자리로 가고 싶은 김토스님은 자리 배치를 도와주려고 합니다.

# 문제
# 팀원 직군 리스트가 입력됐을 때 자리 배치 조건에 맞게 자리 배치가 가능한 모든 경우의 수를 출력해주세요.

# 제한
# 아래 목록에 포함된 직군만 팀 배정을 한다고 가정합니다.
# PO: Product Owner
# PD: Product Designer
# FE: Frontend Developer
# BE: Backend Developer
# 한 팀에 모든 직군은 한 명 이상 포함됩니다.
# 같은 직군 내에는 임의의 정해진 순서가 있다고 가정하고, 같은 직군 내의 자리 변경은 고려하지 않습니다.
# 자리 배치 조건
# 자리 배치 조건은 아래와 같습니다. 더 자세한 설명은 자리 배치 예시를 참고해 주세요.

# 팀원은 일렬로 앉습니다.
# 한 명의 PO는 반드시 맨 왼쪽에 위치해야 합니다.
# 각각의 모든 PO와 각각의 모든 PD는 인접한 자리에 위치해야 합니다.
# PD와 FE 사이에는 다른 사람이 최대 2명까지만 앉을 수 있습니다.
# ex) ["PD", ?, ? "FE"]
# 만약 모든 조건을 만족하게 자리를 배치할 방법이 존재하지 않는다면 0을 출력해주세요.

# 자리 배치 예시
# 보다 정확한 설명을 위해 아래 자리 배치 예시를 준비했습니다.
# 설명 편의상 직군 뒤에 숫자를 붙여 설명하지만, 실제 함수의 인자로 들어오는 리스트에는 숫자가 붙어 있지 않습니다.

# 조건을 만족하는 경우

# ["PO1", "PD1", "FE1", "BE1"]
# ["PO1", "PD1", "PO2", "BE1", "FE1", "BE2"]
# 조건을 만족하지 않는 경우

# ["PO1", "PD1", "PO2", "PD2", "FE1", "BE1"] => PO1과 PD1은 인접하지만, PO1과 PD2가 인접하지 않음
# ["PO1", "PD1", "FE1", "BE1", "BE2", "FE2"] => PD1과 FE1 사이에는 아무도 없지만, PD1과 FE2 사이에는 3명이 앉아 있음.
# 유의 사항

# ["PO1", "PD1", "FE1", "BE1", "FE2"]와 ["PO1", "PD1", "FE2", "BE1", "FE1"]는 ["PO", "PD", "FE", "BE", "FE"]로 같다고 간주하고 하나로 카운트합니다.
# 입력 예시
# 한 팀의 팀원들의 직군이 이름이 문자열 리스트인 position_list로 주어집니다.

# ["PO", "PD", "FE", "BE"]
# 출력 예시
# 2
